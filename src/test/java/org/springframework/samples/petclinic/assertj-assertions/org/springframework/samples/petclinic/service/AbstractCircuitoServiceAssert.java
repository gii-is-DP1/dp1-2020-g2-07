package org.springframework.samples.petclinic.service;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;

/**
 * Abstract base class for {@link CircuitoService} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractCircuitoServiceAssert<S extends AbstractCircuitoServiceAssert<S, A>, A extends CircuitoService> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractCircuitoServiceAssert}</code> to make assertions on actual CircuitoService.
   * @param actual the CircuitoService we want to make assertions on.
   */
  protected AbstractCircuitoServiceAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual CircuitoService's circuits contains the given org.springframework.samples.petclinic.model.Circuito elements.
   * @param circuits the given elements that should be contained in actual CircuitoService's circuits.
   * @return this assertion object.
   * @throws AssertionError if the actual CircuitoService's circuits does not contain all given org.springframework.samples.petclinic.model.Circuito elements.
   */
  public S hasCircuits(org.springframework.samples.petclinic.model.Circuito... circuits) {
    // check that actual CircuitoService we want to make assertions on is not null.
    isNotNull();

    // check that given org.springframework.samples.petclinic.model.Circuito varargs is not null.
    if (circuits == null) failWithMessage("Expecting circuits parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getCircuits(), circuits);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual CircuitoService's circuits contains the given org.springframework.samples.petclinic.model.Circuito elements in Collection.
   * @param circuits the given elements that should be contained in actual CircuitoService's circuits.
   * @return this assertion object.
   * @throws AssertionError if the actual CircuitoService's circuits does not contain all given org.springframework.samples.petclinic.model.Circuito elements.
   */
  public S hasCircuits(java.util.Collection<? extends org.springframework.samples.petclinic.model.Circuito> circuits) {
    // check that actual CircuitoService we want to make assertions on is not null.
    isNotNull();

    // check that given org.springframework.samples.petclinic.model.Circuito collection is not null.
    if (circuits == null) {
      failWithMessage("Expecting circuits parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getCircuits(), circuits.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual CircuitoService's circuits contains <b>only</b> the given org.springframework.samples.petclinic.model.Circuito elements and nothing else in whatever order.
   * @param circuits the given elements that should be contained in actual CircuitoService's circuits.
   * @return this assertion object.
   * @throws AssertionError if the actual CircuitoService's circuits does not contain all given org.springframework.samples.petclinic.model.Circuito elements.
   */
  public S hasOnlyCircuits(org.springframework.samples.petclinic.model.Circuito... circuits) {
    // check that actual CircuitoService we want to make assertions on is not null.
    isNotNull();

    // check that given org.springframework.samples.petclinic.model.Circuito varargs is not null.
    if (circuits == null) failWithMessage("Expecting circuits parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getCircuits(), circuits);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual CircuitoService's circuits contains <b>only</b> the given org.springframework.samples.petclinic.model.Circuito elements in Collection and nothing else in whatever order.
   * @param circuits the given elements that should be contained in actual CircuitoService's circuits.
   * @return this assertion object.
   * @throws AssertionError if the actual CircuitoService's circuits does not contain all given org.springframework.samples.petclinic.model.Circuito elements.
   */
  public S hasOnlyCircuits(java.util.Collection<? extends org.springframework.samples.petclinic.model.Circuito> circuits) {
    // check that actual CircuitoService we want to make assertions on is not null.
    isNotNull();

    // check that given org.springframework.samples.petclinic.model.Circuito collection is not null.
    if (circuits == null) {
      failWithMessage("Expecting circuits parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getCircuits(), circuits.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual CircuitoService's circuits does not contain the given org.springframework.samples.petclinic.model.Circuito elements.
   *
   * @param circuits the given elements that should not be in actual CircuitoService's circuits.
   * @return this assertion object.
   * @throws AssertionError if the actual CircuitoService's circuits contains any given org.springframework.samples.petclinic.model.Circuito elements.
   */
  public S doesNotHaveCircuits(org.springframework.samples.petclinic.model.Circuito... circuits) {
    // check that actual CircuitoService we want to make assertions on is not null.
    isNotNull();

    // check that given org.springframework.samples.petclinic.model.Circuito varargs is not null.
    if (circuits == null) failWithMessage("Expecting circuits parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getCircuits(), circuits);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual CircuitoService's circuits does not contain the given org.springframework.samples.petclinic.model.Circuito elements in Collection.
   *
   * @param circuits the given elements that should not be in actual CircuitoService's circuits.
   * @return this assertion object.
   * @throws AssertionError if the actual CircuitoService's circuits contains any given org.springframework.samples.petclinic.model.Circuito elements.
   */
  public S doesNotHaveCircuits(java.util.Collection<? extends org.springframework.samples.petclinic.model.Circuito> circuits) {
    // check that actual CircuitoService we want to make assertions on is not null.
    isNotNull();

    // check that given org.springframework.samples.petclinic.model.Circuito collection is not null.
    if (circuits == null) {
      failWithMessage("Expecting circuits parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getCircuits(), circuits.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual CircuitoService has no circuits.
   * @return this assertion object.
   * @throws AssertionError if the actual CircuitoService's circuits is not empty.
   */
  public S hasNoCircuits() {
    // check that actual CircuitoService we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have circuits but had :\n  <%s>";

    // check
    if (actual.getCircuits().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getCircuits());
    }

    // return the current assertion for method chaining
    return myself;
  }


}
