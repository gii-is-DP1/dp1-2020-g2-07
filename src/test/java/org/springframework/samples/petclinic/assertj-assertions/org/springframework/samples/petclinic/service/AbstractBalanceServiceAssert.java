package org.springframework.samples.petclinic.service;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link BalanceService} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractBalanceServiceAssert<S extends AbstractBalanceServiceAssert<S, A>, A extends BalanceService> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractBalanceServiceAssert}</code> to make assertions on actual BalanceService.
   * @param actual the BalanceService we want to make assertions on.
   */
  protected AbstractBalanceServiceAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual BalanceService's primerDiaMesPrevio is equal to the given one.
   * @param primerDiaMesPrevio the given primerDiaMesPrevio to compare the actual BalanceService's primerDiaMesPrevio to.
   * @return this assertion object.
   * @throws AssertionError - if the actual BalanceService's primerDiaMesPrevio is not equal to the given one.
   */
  public S hasPrimerDiaMesPrevio(java.time.LocalDate primerDiaMesPrevio) {
    // check that actual BalanceService we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting primerDiaMesPrevio of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.time.LocalDate actualPrimerDiaMesPrevio = actual.getPrimerDiaMesPrevio();
    if (!Objects.areEqual(actualPrimerDiaMesPrevio, primerDiaMesPrevio)) {
      failWithMessage(assertjErrorMessage, actual, primerDiaMesPrevio, actualPrimerDiaMesPrevio);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
