package org.springframework.samples.petclinic.service;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;

/**
 * Abstract base class for {@link SalaService} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractSalaServiceAssert<S extends AbstractSalaServiceAssert<S, A>, A extends SalaService> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractSalaServiceAssert}</code> to make assertions on actual SalaService.
   * @param actual the SalaService we want to make assertions on.
   */
  protected AbstractSalaServiceAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual SalaService's rooms contains the given org.springframework.samples.petclinic.model.Sala elements.
   * @param rooms the given elements that should be contained in actual SalaService's rooms.
   * @return this assertion object.
   * @throws AssertionError if the actual SalaService's rooms does not contain all given org.springframework.samples.petclinic.model.Sala elements.
   */
  public S hasRooms(org.springframework.samples.petclinic.model.Sala... rooms) {
    // check that actual SalaService we want to make assertions on is not null.
    isNotNull();

    // check that given org.springframework.samples.petclinic.model.Sala varargs is not null.
    if (rooms == null) failWithMessage("Expecting rooms parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getRooms(), rooms);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual SalaService's rooms contains the given org.springframework.samples.petclinic.model.Sala elements in Collection.
   * @param rooms the given elements that should be contained in actual SalaService's rooms.
   * @return this assertion object.
   * @throws AssertionError if the actual SalaService's rooms does not contain all given org.springframework.samples.petclinic.model.Sala elements.
   */
  public S hasRooms(java.util.Collection<? extends org.springframework.samples.petclinic.model.Sala> rooms) {
    // check that actual SalaService we want to make assertions on is not null.
    isNotNull();

    // check that given org.springframework.samples.petclinic.model.Sala collection is not null.
    if (rooms == null) {
      failWithMessage("Expecting rooms parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getRooms(), rooms.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual SalaService's rooms contains <b>only</b> the given org.springframework.samples.petclinic.model.Sala elements and nothing else in whatever order.
   * @param rooms the given elements that should be contained in actual SalaService's rooms.
   * @return this assertion object.
   * @throws AssertionError if the actual SalaService's rooms does not contain all given org.springframework.samples.petclinic.model.Sala elements.
   */
  public S hasOnlyRooms(org.springframework.samples.petclinic.model.Sala... rooms) {
    // check that actual SalaService we want to make assertions on is not null.
    isNotNull();

    // check that given org.springframework.samples.petclinic.model.Sala varargs is not null.
    if (rooms == null) failWithMessage("Expecting rooms parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getRooms(), rooms);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual SalaService's rooms contains <b>only</b> the given org.springframework.samples.petclinic.model.Sala elements in Collection and nothing else in whatever order.
   * @param rooms the given elements that should be contained in actual SalaService's rooms.
   * @return this assertion object.
   * @throws AssertionError if the actual SalaService's rooms does not contain all given org.springframework.samples.petclinic.model.Sala elements.
   */
  public S hasOnlyRooms(java.util.Collection<? extends org.springframework.samples.petclinic.model.Sala> rooms) {
    // check that actual SalaService we want to make assertions on is not null.
    isNotNull();

    // check that given org.springframework.samples.petclinic.model.Sala collection is not null.
    if (rooms == null) {
      failWithMessage("Expecting rooms parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getRooms(), rooms.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual SalaService's rooms does not contain the given org.springframework.samples.petclinic.model.Sala elements.
   *
   * @param rooms the given elements that should not be in actual SalaService's rooms.
   * @return this assertion object.
   * @throws AssertionError if the actual SalaService's rooms contains any given org.springframework.samples.petclinic.model.Sala elements.
   */
  public S doesNotHaveRooms(org.springframework.samples.petclinic.model.Sala... rooms) {
    // check that actual SalaService we want to make assertions on is not null.
    isNotNull();

    // check that given org.springframework.samples.petclinic.model.Sala varargs is not null.
    if (rooms == null) failWithMessage("Expecting rooms parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getRooms(), rooms);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual SalaService's rooms does not contain the given org.springframework.samples.petclinic.model.Sala elements in Collection.
   *
   * @param rooms the given elements that should not be in actual SalaService's rooms.
   * @return this assertion object.
   * @throws AssertionError if the actual SalaService's rooms contains any given org.springframework.samples.petclinic.model.Sala elements.
   */
  public S doesNotHaveRooms(java.util.Collection<? extends org.springframework.samples.petclinic.model.Sala> rooms) {
    // check that actual SalaService we want to make assertions on is not null.
    isNotNull();

    // check that given org.springframework.samples.petclinic.model.Sala collection is not null.
    if (rooms == null) {
      failWithMessage("Expecting rooms parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getRooms(), rooms.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual SalaService has no rooms.
   * @return this assertion object.
   * @throws AssertionError if the actual SalaService's rooms is not empty.
   */
  public S hasNoRooms() {
    // check that actual SalaService we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have rooms but had :\n  <%s>";

    // check
    if (actual.getRooms().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getRooms());
    }

    // return the current assertion for method chaining
    return myself;
  }


}
