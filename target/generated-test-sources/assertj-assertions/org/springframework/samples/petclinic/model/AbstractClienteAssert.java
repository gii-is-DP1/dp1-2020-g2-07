package org.springframework.samples.petclinic.model;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link Cliente} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractClienteAssert<S extends AbstractClienteAssert<S, A>, A extends Cliente> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractClienteAssert}</code> to make assertions on actual Cliente.
   * @param actual the Cliente we want to make assertions on.
   */
  protected AbstractClienteAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual Cliente's citas contains the given Cita elements.
   * @param citas the given elements that should be contained in actual Cliente's citas.
   * @return this assertion object.
   * @throws AssertionError if the actual Cliente's citas does not contain all given Cita elements.
   */
  public S hasCitas(Cita... citas) {
    // check that actual Cliente we want to make assertions on is not null.
    isNotNull();

    // check that given Cita varargs is not null.
    if (citas == null) failWithMessage("Expecting citas parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getCitas(), citas);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Cliente's citas contains the given Cita elements in Collection.
   * @param citas the given elements that should be contained in actual Cliente's citas.
   * @return this assertion object.
   * @throws AssertionError if the actual Cliente's citas does not contain all given Cita elements.
   */
  public S hasCitas(java.util.Collection<? extends Cita> citas) {
    // check that actual Cliente we want to make assertions on is not null.
    isNotNull();

    // check that given Cita collection is not null.
    if (citas == null) {
      failWithMessage("Expecting citas parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getCitas(), citas.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Cliente's citas contains <b>only</b> the given Cita elements and nothing else in whatever order.
   * @param citas the given elements that should be contained in actual Cliente's citas.
   * @return this assertion object.
   * @throws AssertionError if the actual Cliente's citas does not contain all given Cita elements.
   */
  public S hasOnlyCitas(Cita... citas) {
    // check that actual Cliente we want to make assertions on is not null.
    isNotNull();

    // check that given Cita varargs is not null.
    if (citas == null) failWithMessage("Expecting citas parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getCitas(), citas);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Cliente's citas contains <b>only</b> the given Cita elements in Collection and nothing else in whatever order.
   * @param citas the given elements that should be contained in actual Cliente's citas.
   * @return this assertion object.
   * @throws AssertionError if the actual Cliente's citas does not contain all given Cita elements.
   */
  public S hasOnlyCitas(java.util.Collection<? extends Cita> citas) {
    // check that actual Cliente we want to make assertions on is not null.
    isNotNull();

    // check that given Cita collection is not null.
    if (citas == null) {
      failWithMessage("Expecting citas parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getCitas(), citas.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Cliente's citas does not contain the given Cita elements.
   *
   * @param citas the given elements that should not be in actual Cliente's citas.
   * @return this assertion object.
   * @throws AssertionError if the actual Cliente's citas contains any given Cita elements.
   */
  public S doesNotHaveCitas(Cita... citas) {
    // check that actual Cliente we want to make assertions on is not null.
    isNotNull();

    // check that given Cita varargs is not null.
    if (citas == null) failWithMessage("Expecting citas parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getCitas(), citas);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Cliente's citas does not contain the given Cita elements in Collection.
   *
   * @param citas the given elements that should not be in actual Cliente's citas.
   * @return this assertion object.
   * @throws AssertionError if the actual Cliente's citas contains any given Cita elements.
   */
  public S doesNotHaveCitas(java.util.Collection<? extends Cita> citas) {
    // check that actual Cliente we want to make assertions on is not null.
    isNotNull();

    // check that given Cita collection is not null.
    if (citas == null) {
      failWithMessage("Expecting citas parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getCitas(), citas.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Cliente has no citas.
   * @return this assertion object.
   * @throws AssertionError if the actual Cliente's citas is not empty.
   */
  public S hasNoCitas() {
    // check that actual Cliente we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have citas but had :\n  <%s>";

    // check
    if (actual.getCitas().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getCitas());
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual Cliente's pagos contains the given Pago elements.
   * @param pagos the given elements that should be contained in actual Cliente's pagos.
   * @return this assertion object.
   * @throws AssertionError if the actual Cliente's pagos does not contain all given Pago elements.
   */
  public S hasPagos(Pago... pagos) {
    // check that actual Cliente we want to make assertions on is not null.
    isNotNull();

    // check that given Pago varargs is not null.
    if (pagos == null) failWithMessage("Expecting pagos parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getPagos(), pagos);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Cliente's pagos contains the given Pago elements in Collection.
   * @param pagos the given elements that should be contained in actual Cliente's pagos.
   * @return this assertion object.
   * @throws AssertionError if the actual Cliente's pagos does not contain all given Pago elements.
   */
  public S hasPagos(java.util.Collection<? extends Pago> pagos) {
    // check that actual Cliente we want to make assertions on is not null.
    isNotNull();

    // check that given Pago collection is not null.
    if (pagos == null) {
      failWithMessage("Expecting pagos parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getPagos(), pagos.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Cliente's pagos contains <b>only</b> the given Pago elements and nothing else in whatever order.
   * @param pagos the given elements that should be contained in actual Cliente's pagos.
   * @return this assertion object.
   * @throws AssertionError if the actual Cliente's pagos does not contain all given Pago elements.
   */
  public S hasOnlyPagos(Pago... pagos) {
    // check that actual Cliente we want to make assertions on is not null.
    isNotNull();

    // check that given Pago varargs is not null.
    if (pagos == null) failWithMessage("Expecting pagos parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getPagos(), pagos);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Cliente's pagos contains <b>only</b> the given Pago elements in Collection and nothing else in whatever order.
   * @param pagos the given elements that should be contained in actual Cliente's pagos.
   * @return this assertion object.
   * @throws AssertionError if the actual Cliente's pagos does not contain all given Pago elements.
   */
  public S hasOnlyPagos(java.util.Collection<? extends Pago> pagos) {
    // check that actual Cliente we want to make assertions on is not null.
    isNotNull();

    // check that given Pago collection is not null.
    if (pagos == null) {
      failWithMessage("Expecting pagos parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getPagos(), pagos.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Cliente's pagos does not contain the given Pago elements.
   *
   * @param pagos the given elements that should not be in actual Cliente's pagos.
   * @return this assertion object.
   * @throws AssertionError if the actual Cliente's pagos contains any given Pago elements.
   */
  public S doesNotHavePagos(Pago... pagos) {
    // check that actual Cliente we want to make assertions on is not null.
    isNotNull();

    // check that given Pago varargs is not null.
    if (pagos == null) failWithMessage("Expecting pagos parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getPagos(), pagos);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Cliente's pagos does not contain the given Pago elements in Collection.
   *
   * @param pagos the given elements that should not be in actual Cliente's pagos.
   * @return this assertion object.
   * @throws AssertionError if the actual Cliente's pagos contains any given Pago elements.
   */
  public S doesNotHavePagos(java.util.Collection<? extends Pago> pagos) {
    // check that actual Cliente we want to make assertions on is not null.
    isNotNull();

    // check that given Pago collection is not null.
    if (pagos == null) {
      failWithMessage("Expecting pagos parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getPagos(), pagos.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Cliente has no pagos.
   * @return this assertion object.
   * @throws AssertionError if the actual Cliente's pagos is not empty.
   */
  public S hasNoPagos() {
    // check that actual Cliente we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have pagos but had :\n  <%s>";

    // check
    if (actual.getPagos().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getPagos());
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual Cliente's suscripcion is equal to the given one.
   * @param suscripcion the given suscripcion to compare the actual Cliente's suscripcion to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Cliente's suscripcion is not equal to the given one.
   */
  public S hasSuscripcion(SubType suscripcion) {
    // check that actual Cliente we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting suscripcion of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    SubType actualSuscripcion = actual.getSuscripcion();
    if (!Objects.areEqual(actualSuscripcion, suscripcion)) {
      failWithMessage(assertjErrorMessage, actual, suscripcion, actualSuscripcion);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
